{"version":3,"sources":["sdp.jpg","alogo.png","apple.png","redux/actions/actionTypes.js","redux/actions/LoginAction.js","component/Login/LoginPage.js","component/utils/NotFound.js","component/Navi/Navi.js","component/Login/UserDetalil.js","component/utils/Dashboard.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/userCheckReducer.js","redux/reducers/oguzReducer.js","index.js","redux/reducers/configureStore.js"],"names":["module","exports","LOGIN_ACTION_SUCCESS","userCheck","dispatch","fetch","then","response","json","result","type","actionTypes","payload","LoginPage","this","props","actions","className","console","log","userdata","FormGroup","Label","for","Input","name","id","placeholder","Button","color","block","Component","connect","state","userCheckReducer","bindActionCreators","LoginAction","Navi","toggle","bind","isOpen","setState","Navbar","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","size","React","UserDetalil","categories","style","marginTop","length","Form","inline","oguzReducer","Dashboard","Row","Col","Card","bg","text","width","Header","textAlign","CardImg","top","src","logo","logo2","logo3","App","Container","path","exact","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99e74864.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sdp.ffe430d7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/alogo.2522bc42.png\";","module.exports = __webpack_public_path__ + \"static/media/apple.d18071ac.png\";","export const LOGIN_ACTION_SUCCESS = \"LOGIN_ACTION_SUCCESS\"\r\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\"\r\n\r\n\r\n\r\n\r\nexport const ALERT_SUCCESS = \"ALERT_SUCCESS\"\r\nexport const ALERT_ERROR = \"ALERT_ERROR\"\r\nexport const ALERT_CLEAR = \"ALERT_CLEAR\"","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function userCheckSuccess(userdata){\r\n    return {\r\n        type:actionTypes.LOGIN_ACTION_SUCCESS,payload:userdata\r\n    }\r\n}\r\n\r\n\r\nexport function userCheck(){\r\n  return function(dispatch){\r\n    let url = \"http://localhost:3000/userdata\";\r\n    return fetch(url).then(response=>response.json()).then(result=>dispatch(userCheckSuccess(result)));\r\n  }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport { FormGroup} from \"react-bootstrap\";\r\nimport \"../../component/AllComponent.css\";\r\nimport { Button, Input, Label } from \"reactstrap\";\r\nimport {connect} from \"react-redux\"\r\nimport {bindActionCreators} from \"redux\"\r\nimport * as LoginAction from \"../../redux/actions/LoginAction\"\r\n\r\nclass LoginPage extends Component {\r\n\r\n\r\n  componentDidMount(){\r\n    this.props.actions.userCheck()\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Login\">\r\n                {\r\n          console.log(this.props.userdata)\r\n                }\r\n        <form>\r\n          <FormGroup >\r\n            <Label for=\"email\">Email</Label>\r\n            <Input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              placeholder=\"Enter Email\"\r\n\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Password\">Password</Label>\r\n            <Input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              placeholder=\"Enter Password\"\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button\r\n            color=\"success\"\r\n            block\r\n            \r\n            type=\"submit\"\r\n          >\r\n            Login\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state){\r\n  return{\r\n    userdata:state.userCheckReducer\r\n  }\r\n}\r\n\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n  return {\r\n    actions:{\r\n      userCheck:bindActionCreators(LoginAction.userCheck,dispatch)\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginPage)","import React, { Component } from 'react'\r\n\r\n\r\nexport default class NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>404</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass Navi extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">LoadTest</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink href=\"/usersettings\">MyProfile</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <Button\r\n                  color=\"danger\"\r\n                  size=\"sm\"\r\n                  // disabled={!this.validateForm()}\r\n                  type=\"submit\"\r\n                >\r\n                  Logout\r\n                </Button>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navi;\r\n","import React, { Component } from \"react\";\r\nimport Navi from \"../Navi/Navi\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from \"reactstrap\";\r\n\r\nimport {bindActionCreators} from \"redux\"\r\nimport * as LoginAction from \"../../redux/actions/LoginAction\"\r\nimport {connect} from \"react-redux\"\r\n\r\nclass UserDetalil extends Component {\r\n\r\n\r\n  componentDidMount(){\r\n    // this.props.actions.getCategories()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          console.log(this.props.categories)\r\n        }\r\n        <Navi />\r\n        <Container style={{marginTop:'10%'}}>\r\n            <FormGroup>\r\n              <Label for=\"userName\">UserName : </Label> <Label>{this.props.categories.length}</Label>\r\n            </FormGroup>\r\n            <FormGroup>\r\n            <Label for=\"email\">Email : </Label> <Label>admin@admin.com</Label>\r\n            </FormGroup>\r\n\r\n            <Form inline>\r\n        <FormGroup>\r\n          <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"New password\" />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Confirm Password\" />\r\n        </FormGroup>\r\n\r\n        <Button>ChangePassword</Button>\r\n      </Form>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n      categories:state.oguzReducer\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n  return {\r\n    actions:{\r\n      // getCategories:bindActionCreators(LoginAction.getCategories,dispatch)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UserDetalil)\r\n","import React, { Component } from \"react\";\r\nimport Navi from \"../Navi/Navi\";\r\nimport logo from \"../../sdp.jpg\";\r\nimport logo2 from \"../../alogo.png\";\r\nimport logo3 from \"../../apple.png\";\r\nimport { Card, Container, CardImg, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navi />\r\n        <Container style={{marginTop:'10%'}}>\r\n          <Row>\r\n            <Col>\r\n              <Card bg=\"success\" text=\"white\" style={{ width: \"18rem\" }}>\r\n                <Card.Header style={{ textAlign: \"center\" }}>SDP</Card.Header>\r\n                <CardImg top width=\"100%\" src={logo} />\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Card bg=\"success\" text=\"white\" style={{ width: \"18rem\" }}>\r\n                <Card.Header style={{ textAlign: \"center\" }}>Android</Card.Header>\r\n                <CardImg top width=\"100%\" src={logo2} />\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Card bg=\"success\" text=\"white\" style={{ width: \"18rem\" }}>\r\n                <Card.Header style={{ textAlign: \"center\" }}>IOS</Card.Header>\r\n                <CardImg top width=\"100%\" src={logo3} />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { Container } from \"reactstrap\"\nimport LoginPage from \"../src/component/Login/LoginPage\"\nimport {Route,Switch} from \"react-router-dom\"\nimport NotFound from \"./component/utils/NotFound\"\nimport UserDetalil from \"./component/Login/UserDetalil\"\nimport Dashboard from './component/utils/Dashboard';\n\n\nclass App extends Component {\n  render() {\n  \n    return (\n      <Container>\n      <div >\n        <Switch>\n\n          <Route path=\"/\" exact component={LoginPage}/>\n          <Route path=\"/userSettings\" exact component={UserDetalil}/>\n          <Route path=\"/user\" exact component={Dashboard}/>\n          <Route component={LoginPage}></Route>\n        </Switch>\n      </div></Container>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n    userdata:[],\r\n    categories:[]\r\n}","import {combineReducers} from \"redux\"\r\nimport userCheckReducer from \"./userCheckReducer\"\r\nimport oguzReducer from \"./oguzReducer\"\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    userCheckReducer,\r\n    oguzReducer\r\n    \r\n})\r\n\r\nexport default rootReducer;","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\n\r\nexport default function userCheckReducer(state=initialState.categories,action){\r\n\r\n    switch (action.type) {\r\n        \r\n        case actionTypes.LOGIN_ACTION_SUCCESS:\r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\n\r\nexport default function oguzReducer(state=initialState.categories,action){\r\n\r\n    switch (action.type) {\r\n        \r\n        case actionTypes.LOGIN_ACTION_SUCCESS:\r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from \"react-redux\"\nimport configureStore from \"./redux/reducers/configureStore\"\n\nconst store = configureStore();\n\nReactDOM.render(<BrowserRouter><Provider store={store}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import {createStore, applyMiddleware} from \"redux\"\r\nimport rootReducer from \"./index\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nexport default function configureStore(){\r\n    return createStore(rootReducer,applyMiddleware(thunk))\r\n}"],"sourceRoot":""}